---
title: "SIAHL Stats EDA"
format: html
editor: visual
---

```{r}
#| message: false
#| warning: false
library(tidyverse)
library(rvest)
library(xml2)
library(polite)
```

```{r}
# Define the URL
base_url <- "https://stats.sharksice.timetoscore.com/"
#session <- bow(base_url)

promote_header <- function(df) { 
    names(df) <- df[1,]
    df[-1, ] 
}

get_scoring_tbl <- function(box_score, home = TRUE) {
    list_num = ifelse(home, 2, 1)
    scoring <- box_score[list_num] %>% html_table() %>% .[[1]] %>% 
        promote_header() %>% 
        clean_names()
}
```

Get the team division information

```{r}
url <- paste0(base_url, "display-stats.php?league=1&season=56")

# Read the webpage
webpage <- read_html(url)

# Scrape the Adult Division names and team rows
table_rows <- webpage %>%
  html_elements("tr") 

# Initialize an empty tibble for storing results
teams <- tibble()

# Initialize a variable to store the current division
current_division <- ""

# Loop over each table row
for (i in 1:length(table_rows)) {
  # Get the row
  row <- table_rows[[i]]
  team_extract <- row %>% html_elements("td a") %>%  html_text(trim = TRUE)

  # Check if it's a division row
  if (row %>% html_text() %>% str_detect("Adult Division")) {
    current_division <- row %>% html_text()
    rank <- 1
  # Check if it's a team row
  } else if (length(team_extract) > 0) {
    team_name <- row %>% html_elements("td a") %>%  html_text(trim = TRUE)
    team_stats <- paste0(base_url, row %>% html_elements("td a") %>%  html_attr("href"))

    team_data <- tibble(
      team = team_name,
      team_id = team_stats %>%  str_extract('\\?team=\\d+') %>% str_extract('\\d+'),
      team_stats = team_stats,
      division = current_division %>% str_replace('Adult Division ', ''),
      division_rank = rank
    )
    rank = rank + 1

    # Append the team data to final_data
    teams <- bind_rows(teams, team_data)
  }
}
```

Scrape Game and Player info (loop over teams)

```{r}
# Initialize an empty tibble for storing results
players <- tibble() 
all_games <- tibble()

# game_tables is more intensive, so we leverage existing data
game_tables_file = "games_tables.RDS"
if (file.exists(game_tables_file)) {
    game_tables <- readRDS(file = game_tables_file)
} else {
    game_tables <- list()
}

#game_tables is a global lookup
get_scoring_html <- function(game_id, verbose = TRUE) {
    if (is.null(game_tables[[game_id]])) {
        if (verbose) message('Capturing game ', game_id)
        game_url = sprintf("%soss-scoresheet?game_id=%s&mode=display", 
                                 base_url ,str_extract(game_id, '\\d+')) 
        game_tables[[game_id]] <<- game_url %>% read_html() %>% html_elements(".d25l table") %>% list() 
    }
    game_tables[[game_id]]
}

# Loop over each team URL
for (iteam in 1:nrow(teams)) {
    message(sprintf("scraping stats for %s in %s (%d/%d)", 
        teams$team[iteam], teams$division[iteam], iteam, nrow(teams)))
    
    team_name = teams$team[iteam]
    team_webpage <- read_html(teams$team_stats[iteam])
    
    team_tables <- team_webpage %>% html_nodes("table")
    player_stats <- team_tables %>% .[2] %>% html_table(header = TRUE) %>% .[[1]] %>% promote_header()
    game_list <-    team_tables %>% .[1] %>% html_table(header = TRUE) %>% .[[1]] %>% promote_header()
    
    #fix duplicate Goals headers
    game_cols <- names(game_list) 
    fix_cols <- which(game_cols == 'Goals')
    game_cols[fix_cols[1]] <- 'Away Goals'
    game_cols[fix_cols[2]] <- 'Home Goals'
    names(game_list) <- game_cols
    
    player_stats <- player_stats %>% 
        mutate(across(3:ncol(.), as.numeric)) %>% 
        mutate(Team = teams$team[iteam], 
               Division = teams$division[iteam], 
               Rank = teams$division_rank[iteam])
    
    #get game info but don't process it yet
    walk(game_list$Game, get_scoring_html, verbose = TRUE)
    games <- tibble(Team = teams$team[iteam], 
               Division = teams$division[iteam]
    ) %>% bind_cols(
        game_list %>% 
        select(Game, Home, Away, `Home Goals`, `Away Goals`) %>% 
        mutate(home = Home == team_name,
               shootout = str_detect(paste0(`Home Goals`, `Away Goals`), 'S'),
               `Home Goals` = as.numeric(str_extract(`Home Goals`, '\\d+')),
               `Away Goals` = as.numeric(str_extract(`Away Goals`, '\\d+')),
               home_diff = `Home Goals` - `Away Goals`
        ) 
    ) 
    all_games <- bind_rows(all_games, games)
    
    
    

  
  # Append the table to final_data
  players <- bind_rows(players, player_stats)

  Sys.sleep(1)
}

```

Save files to disk

```{r}
player_file = sprintf("player_stats-%s.RDS", now())
games_file = sprintf("games_stats-%s.RDS", now())
saveRDS(players, file = player_file)
saveRDS(all_games, file = games_file)

#backup before saving
if (file.exists(game_tables_file)) {
    #backup the existing game file
    backup_name <- str_replace(game_tables_file, '\\.RDS', 
                               format(file.info(game_tables_file)$mtime, '-%Y-%m-%d-%H%M%S.RDS'))
    if(file.copy(game_tables_file, backup_name, copy.date = TRUE)) {
        message('Backed up ', game_tables_file, ' as ', backup_name)
    } else {
        warning('Backup failed (existing backup file?)')
    }
}
saveRDS(game_tables, file = game_tables_file)
```

