---
title: "SIAHL Stats RTL - using player lookup"
format: html
editor: visual
---

```{r}
#| message: false
#| warning: false
library(tidyverse)
library(rvest)
library(xml2)
library(polite)

# Define the URL
base_url <- "https://stats.sharksice.timetoscore.com/"

source('siahl-utils.R')
```

Get the season list

```{r}
url <- paste0(base_url, "display-stats.php?league=1")

# Read the webpage
webpage <- read_html(url)

# Get the seasons
season_menu <- webpage %>%
    html_element("select") %>% 
    html_elements("option")

seasons <- tibble(
    season_id = season_menu %>% html_attr("value"),
    season_name = season_menu %>% html_text2()
)
```

Get the team division information for `Winter 2023`

TODO: this should be input to this file

```{r}
season <- 'Current' # "Current" or "<Season> <Year>" eg. "Winter 2023"
season_id <- seasons %>% filter(season_name == season) %>% pull(season_id)
season_current <- "Summer 2023" 
season_name <- ifelse(season == 'Current', season_current, season)
stopifnot(season_id >= 0)
season_file <- "siahl_season_ids.RDS"

season_url <- 
url <- sprintf("%sdisplay-stats.php?league=1&season=%s", base_url, season_id)


# Read the webpage
webpage <- read_html(url)

# Scrape the Adult Division names and team rows
table_rows <- webpage %>%
  html_elements("tr") 

# Initialize an empty tibble for storing results
teams <- tibble()

# Initialize a variable to store the current division
current_division <- ""

# Loop over each table row
for (i in 1:length(table_rows)) {
  # Get the row
  row <- table_rows[[i]]
  team_extract <- row %>% html_elements("td a") %>%  html_text(trim = TRUE)

  # Check if it's a division row
  if (row %>% html_text() %>% str_detect("Adult Division")) {
    current_division <- row %>% html_text()
    rank <- 1
  # Check if it's a team row
  } else if (length(team_extract) > 0) {
    team_name <- row %>% html_elements("td a") %>%  html_text(trim = TRUE)
    team_stats <- paste0(base_url, row %>% html_elements("td a") %>%  html_attr("href"))

    team_data <- tibble(
      team = team_name,
      team_id = team_stats %>%  str_extract('\\?team=\\d+') %>% str_extract('\\d+'),
      team_stats = team_stats,
      division = current_division %>% str_replace('Adult Division ', ''),
      division_rank = rank
    )
    rank = rank + 1

    # Append the team data to final_data
    teams <- bind_rows(teams, team_data)
  }
}
```

Scrape Game and Player info (loop over teams)

```{r}
#We leverage existing data
player_file = sprintf("player_stats-all_seasons.RDS")
if (file.exists(player_file)) {
    players <- readRDS(file = player_file)
} else {
    players <- tibble()
}


# Loop over each team URL
t0 <- Sys.time()
for (iteam in 1:nrow(teams)) {
    message(sprintf("scraping player history for %s in %s (%d/%d) @ %s... ", 
        teams$team[iteam], teams$division[iteam], iteam, nrow(teams),
        format(Sys.time(), "%H:%M:%S %Z")), appendLF = FALSE)
    
    team_name = teams$team[iteam]
    team_webpage <- read_html(teams$team_stats[iteam])
    
    team_tables <- team_webpage %>% html_nodes("table")
    roster_table <- team_tables %>% .[2] %>% html_elements('td a') 
    roster_urls <- tibble(Name = roster_table %>% html_text2(),
                          player_url = roster_table %>% html_attr('href'))
    
    for (iplayer in 1:nrow(roster_urls)) {
        player_row <- roster_urls[iplayer, ]
        known_players <- suppressWarnings(players$player_url %>% unique)
        if (player_row$player_url %in% known_players) next
        player_url <- sprintf("%s%s", base_url, player_row$player_url)
        player_teams <- read_html(player_url) %>% 
            html_element('#playerstattable') %>% 
            html_table() %>% 
            promote_header() %>% 
            mutate(Name = player_row$Name,
                   player_url = player_row$player_url)
        players <- bind_rows(players, player_teams)
    }
    elapsed <- Sys.time() - t0
    t0 <- Sys.time()
    print(elapsed)
    
}

```

Save files to disk

```{r}
player_file = sprintf("player_stats-all_seasons.RDS")
#saveRDS(seasons, file = season_file)

#backup before saving
if (file.exists(player_file)) {
    #backup the existing game file
    backup_name <- str_replace(player_file, '\\.RDS', 
                               format(file.info(player_file)$mtime, '-%Y-%m-%d-%H%M%S.RDS'))
    if(file.copy(player_file, backup_name, copy.date = TRUE)) {
        message('Backed up ', player_file, ' as ', backup_name)
    } else {
        warning('Backup failed (existing backup file?)')
    }
}
saveRDS(players, file = player_file)

```
